# This is a basic workflow to help you get started with Actions

name: CV Status

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: LaTeX compilation
  # You may pin to the exact commit or the version.
  # uses: dante-ev/latex-action@49cf7cb5f79e7b2006dbdffea85e02bec0b6244b
        uses: dante-ev/latex-action@2021-A
        with:
    # The root LaTeX file to be compiled
            root_file: Orleanski_Dmitri.CV.tex
    # The working directory for the latex compiler to be invoked
            working_directory: src.tex # optional
    # LaTeX engine to be used
            compiler: latexmk # optional, default is latexmk
    # Extra arguments to be passed to the latex compiler
            args: -pdf -latexoption=-file-line-error -latexoption=-interaction=nonstopmode # optional, default is -pdf -latexoption=-file-line-error -latexoption=-interaction=nonstopmode
    # Install extra packages by apt-get
            #extra_system_packages: # optional

    # Загружаем собранные pdf-файлы
      - name: Upload pdf document
        uses: actions/upload-artifact@v2
        with:
        # Это значение используется как ключ в хранилище
            name: Orleanski_Dmitri.CV.pdf
        # Путь до собранного pdf. Может содержать “*”, “**”
        # Здесь это <working_directory>/<jobname>.pdf
            path: src.tex/Orleanski_Dmitri.CV.pdf

  deploy:
    runs-on: ubuntu-latest
    # Деплой будет только на ветке master. Закомментируйте, если не надо
    if: github.ref == 'refs/heads/release'
    # Можно зависеть от любого другого job. Порядок выполнения будет подстраиваться.
    needs: [build]
    steps:
      # Это хак, чтобы дергать bash-команды и запоминанать их результат
      - name: Variables
        # id используется внутренне: по нему можно ссылаться на результаты из другого step
        id: vars
        # echo в таком форматировании позволит впоследствии ссылаться на результаты через ${{ steps.<step_id>.outputs.<variable_name> }}
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          # Тот самый ключ, который мы указывали в upload-artifact
          name: Orleanski_Dmitri.CV.pdf
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          # По офф.документации, надо указать GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          # Берем результат из step с id=vars (см. выше). 
          # Получим теги вида “my_doc-<дата билда>-<первые 8 символов из sha коммита>
          tag_name: Orleanski_Dmitri.CV-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha8 }}
          # Имя, которое будет высвечиваться в релизе
          release_name: My Actions document (version ${{ steps.vars.outputs.date }})
          # Наш релиз не набросок и не пререлиз, так что оба в false
          draft: false
          prerelease: false
      # Прикладываемые файлы надо заливать отдельным step
      - name: Upload pdf asset
        uses: actions/upload-release-asset@v1
        env:
          # Тоже требуется токен
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Из предыдущего step с id=create_release генерится upload_url - по нему и надо заливать
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Не переходим в папку latex_sources, поскольку download-artifacts грузит в текущую директорию
          asset_path: ./Orleanski_Dmitri.CV.pdf
          # Имя, которое будет высвечиваться в релизе
          asset_name: my_asset_name.pdf
          asset_content_type: application/pdf
